package com.ruanyun.chezhiyi.commonlib.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ruanyun.chezhiyi.commonlib.model.HomeIconInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_ICON_INFO".
*/
public class HomeIconInfoDao extends AbstractDao<HomeIconInfo, Void> {

    public static final String TABLENAME = "HOME_ICON_INFO";

    /**
     * Properties of entity HomeIconInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HomeIconName = new Property(0, String.class, "homeIconName", false, "HOME_ICON_NAME");
        public final static Property HomeIconNum = new Property(1, String.class, "homeIconNum", false, "HOME_ICON_NUM");
        public final static Property AndroidPic = new Property(2, String.class, "androidPic", false, "ANDROID_PIC");
        public final static Property ModuleType = new Property(3, int.class, "moduleType", false, "MODULE_TYPE");
        public final static Property ModuleNum = new Property(4, String.class, "moduleNum", false, "MODULE_NUM");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property SortNum = new Property(6, int.class, "sortNum", false, "SORT_NUM");
    }


    public HomeIconInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HomeIconInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_ICON_INFO\" (" + //
                "\"HOME_ICON_NAME\" TEXT," + // 0: homeIconName
                "\"HOME_ICON_NUM\" TEXT UNIQUE ," + // 1: homeIconNum
                "\"ANDROID_PIC\" TEXT," + // 2: androidPic
                "\"MODULE_TYPE\" INTEGER NOT NULL ," + // 3: moduleType
                "\"MODULE_NUM\" TEXT NOT NULL ," + // 4: moduleNum
                "\"REMARK\" TEXT," + // 5: remark
                "\"SORT_NUM\" INTEGER NOT NULL );"); // 6: sortNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_ICON_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeIconInfo entity) {
        stmt.clearBindings();
 
        String homeIconName = entity.getHomeIconName();
        if (homeIconName != null) {
            stmt.bindString(1, homeIconName);
        }
 
        String homeIconNum = entity.getHomeIconNum();
        if (homeIconNum != null) {
            stmt.bindString(2, homeIconNum);
        }
 
        String androidPic = entity.getAndroidPic();
        if (androidPic != null) {
            stmt.bindString(3, androidPic);
        }
        stmt.bindLong(4, entity.getModuleType());
        stmt.bindString(5, entity.getModuleNum());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
        stmt.bindLong(7, entity.getSortNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeIconInfo entity) {
        stmt.clearBindings();
 
        String homeIconName = entity.getHomeIconName();
        if (homeIconName != null) {
            stmt.bindString(1, homeIconName);
        }
 
        String homeIconNum = entity.getHomeIconNum();
        if (homeIconNum != null) {
            stmt.bindString(2, homeIconNum);
        }
 
        String androidPic = entity.getAndroidPic();
        if (androidPic != null) {
            stmt.bindString(3, androidPic);
        }
        stmt.bindLong(4, entity.getModuleType());
        stmt.bindString(5, entity.getModuleNum());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
        stmt.bindLong(7, entity.getSortNum());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HomeIconInfo readEntity(Cursor cursor, int offset) {
        HomeIconInfo entity = new HomeIconInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // homeIconName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // homeIconNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // androidPic
            cursor.getInt(offset + 3), // moduleType
            cursor.getString(offset + 4), // moduleNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.getInt(offset + 6) // sortNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeIconInfo entity, int offset) {
        entity.setHomeIconName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHomeIconNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAndroidPic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModuleType(cursor.getInt(offset + 3));
        entity.setModuleNum(cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSortNum(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HomeIconInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HomeIconInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(HomeIconInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
