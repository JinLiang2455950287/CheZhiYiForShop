package com.ruanyun.chezhiyi.commonlib.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ruanyun.chezhiyi.commonlib.model.HxGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HX_GROUP".
*/
public class HxGroupDao extends AbstractDao<HxGroup, Void> {

    public static final String TABLENAME = "HX_GROUP";

    /**
     * Properties of entity HxGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GroupNum = new Property(0, String.class, "groupNum", false, "GROUP_NUM");
        public final static Property UserNum = new Property(1, String.class, "userNum", false, "USER_NUM");
        public final static Property GroupName = new Property(2, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupTotalNum = new Property(3, Integer.class, "groupTotalNum", false, "GROUP_TOTAL_NUM");
    }


    public HxGroupDao(DaoConfig config) {
        super(config);
    }
    
    public HxGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HX_GROUP\" (" + //
                "\"GROUP_NUM\" TEXT," + // 0: groupNum
                "\"USER_NUM\" TEXT NOT NULL UNIQUE ," + // 1: userNum
                "\"GROUP_NAME\" TEXT," + // 2: groupName
                "\"GROUP_TOTAL_NUM\" INTEGER);"); // 3: groupTotalNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HX_GROUP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HxGroup entity) {
        stmt.clearBindings();
 
        String groupNum = entity.getGroupNum();
        if (groupNum != null) {
            stmt.bindString(1, groupNum);
        }
        stmt.bindString(2, entity.getUserNum());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }
 
        Integer groupTotalNum = entity.getGroupTotalNum();
        if (groupTotalNum != null) {
            stmt.bindLong(4, groupTotalNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HxGroup entity) {
        stmt.clearBindings();
 
        String groupNum = entity.getGroupNum();
        if (groupNum != null) {
            stmt.bindString(1, groupNum);
        }
        stmt.bindString(2, entity.getUserNum());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }
 
        Integer groupTotalNum = entity.getGroupTotalNum();
        if (groupTotalNum != null) {
            stmt.bindLong(4, groupTotalNum);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HxGroup readEntity(Cursor cursor, int offset) {
        HxGroup entity = new HxGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // groupNum
            cursor.getString(offset + 1), // userNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // groupTotalNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HxGroup entity, int offset) {
        entity.setGroupNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserNum(cursor.getString(offset + 1));
        entity.setGroupName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupTotalNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HxGroup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HxGroup entity) {
        return null;
    }

    @Override
    public boolean hasKey(HxGroup entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
