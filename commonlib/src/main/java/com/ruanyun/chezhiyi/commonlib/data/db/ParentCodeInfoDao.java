package com.ruanyun.chezhiyi.commonlib.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ruanyun.chezhiyi.commonlib.model.ParentCodeInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARENT_CODE_INFO".
*/
public class ParentCodeInfoDao extends AbstractDao<ParentCodeInfo, Void> {

    public static final String TABLENAME = "PARENT_CODE_INFO";

    /**
     * Properties of entity ParentCodeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ParentId = new Property(0, Long.class, "parentId", false, "PARENT_ID");
        public final static Property ParentName = new Property(1, String.class, "parentName", false, "PARENT_NAME");
        public final static Property ParentCode = new Property(2, String.class, "parentCode", false, "PARENT_CODE");
        public final static Property ItemCode = new Property(3, String.class, "itemCode", false, "ITEM_CODE");
        public final static Property ItemName = new Property(4, String.class, "itemName", false, "ITEM_NAME");
    }


    public ParentCodeInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ParentCodeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARENT_CODE_INFO\" (" + //
                "\"PARENT_ID\" INTEGER UNIQUE ," + // 0: parentId
                "\"PARENT_NAME\" TEXT," + // 1: parentName
                "\"PARENT_CODE\" TEXT," + // 2: parentCode
                "\"ITEM_CODE\" TEXT," + // 3: itemCode
                "\"ITEM_NAME\" TEXT);"); // 4: itemName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARENT_CODE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParentCodeInfo entity) {
        stmt.clearBindings();
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(1, parentId);
        }
 
        String parentName = entity.getParentName();
        if (parentName != null) {
            stmt.bindString(2, parentName);
        }
 
        String parentCode = entity.getParentCode();
        if (parentCode != null) {
            stmt.bindString(3, parentCode);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(4, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(5, itemName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParentCodeInfo entity) {
        stmt.clearBindings();
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(1, parentId);
        }
 
        String parentName = entity.getParentName();
        if (parentName != null) {
            stmt.bindString(2, parentName);
        }
 
        String parentCode = entity.getParentCode();
        if (parentCode != null) {
            stmt.bindString(3, parentCode);
        }
 
        String itemCode = entity.getItemCode();
        if (itemCode != null) {
            stmt.bindString(4, itemCode);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(5, itemName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ParentCodeInfo readEntity(Cursor cursor, int offset) {
        ParentCodeInfo entity = new ParentCodeInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // parentId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // parentName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // itemName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParentCodeInfo entity, int offset) {
        entity.setParentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParentName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItemName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ParentCodeInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ParentCodeInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(ParentCodeInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
