package com.ruanyun.chezhiyi.commonlib.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ruanyun.chezhiyi.commonlib.model.ProjectType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_TYPE".
*/
public class ProjectTypeDao extends AbstractDao<ProjectType, Void> {

    public static final String TABLENAME = "PROJECT_TYPE";

    /**
     * Properties of entity ProjectType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ProjectId = new Property(0, int.class, "projectId", false, "PROJECT_ID");
        public final static Property ProjectNum = new Property(1, String.class, "projectNum", false, "PROJECT_NUM");
        public final static Property ProjectName = new Property(2, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ParentNum = new Property(3, String.class, "parentNum", false, "PARENT_NUM");
        public final static Property ProjectAllName = new Property(4, String.class, "projectAllName", false, "PROJECT_ALL_NAME");
        public final static Property SortNum = new Property(5, int.class, "sortNum", false, "SORT_NUM");
        public final static Property IsMake = new Property(6, int.class, "isMake", false, "IS_MAKE");
        public final static Property IsWorkBay = new Property(7, int.class, "isWorkBay", false, "IS_WORK_BAY");
    }


    public ProjectTypeDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_TYPE\" (" + //
                "\"PROJECT_ID\" INTEGER NOT NULL UNIQUE ," + // 0: projectId
                "\"PROJECT_NUM\" TEXT NOT NULL ," + // 1: projectNum
                "\"PROJECT_NAME\" TEXT," + // 2: projectName
                "\"PARENT_NUM\" TEXT," + // 3: parentNum
                "\"PROJECT_ALL_NAME\" TEXT," + // 4: projectAllName
                "\"SORT_NUM\" INTEGER NOT NULL ," + // 5: sortNum
                "\"IS_MAKE\" INTEGER NOT NULL ," + // 6: isMake
                "\"IS_WORK_BAY\" INTEGER NOT NULL );"); // 7: isWorkBay
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProjectId());
        stmt.bindString(2, entity.getProjectNum());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
 
        String parentNum = entity.getParentNum();
        if (parentNum != null) {
            stmt.bindString(4, parentNum);
        }
 
        String projectAllName = entity.getProjectAllName();
        if (projectAllName != null) {
            stmt.bindString(5, projectAllName);
        }
        stmt.bindLong(6, entity.getSortNum());
        stmt.bindLong(7, entity.getIsMake());
        stmt.bindLong(8, entity.getIsWorkBay());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProjectId());
        stmt.bindString(2, entity.getProjectNum());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
 
        String parentNum = entity.getParentNum();
        if (parentNum != null) {
            stmt.bindString(4, parentNum);
        }
 
        String projectAllName = entity.getProjectAllName();
        if (projectAllName != null) {
            stmt.bindString(5, projectAllName);
        }
        stmt.bindLong(6, entity.getSortNum());
        stmt.bindLong(7, entity.getIsMake());
        stmt.bindLong(8, entity.getIsWorkBay());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ProjectType readEntity(Cursor cursor, int offset) {
        ProjectType entity = new ProjectType( //
            cursor.getInt(offset + 0), // projectId
            cursor.getString(offset + 1), // projectNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parentNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // projectAllName
            cursor.getInt(offset + 5), // sortNum
            cursor.getInt(offset + 6), // isMake
            cursor.getInt(offset + 7) // isWorkBay
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectType entity, int offset) {
        entity.setProjectId(cursor.getInt(offset + 0));
        entity.setProjectNum(cursor.getString(offset + 1));
        entity.setProjectName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProjectAllName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortNum(cursor.getInt(offset + 5));
        entity.setIsMake(cursor.getInt(offset + 6));
        entity.setIsWorkBay(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ProjectType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ProjectType entity) {
        return null;
    }

    @Override
    public boolean hasKey(ProjectType entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
