package com.ruanyun.chezhiyi.commonlib.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ruanyun.chezhiyi.commonlib.model.RemindInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMIND_INFO".
*/
public class RemindInfoDao extends AbstractDao<RemindInfo, Void> {

    public static final String TABLENAME = "REMIND_INFO";

    /**
     * Properties of entity RemindInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RemindInfoId = new Property(0, int.class, "remindInfoId", false, "REMIND_INFO_ID");
        public final static Property RemindInfoNum = new Property(1, String.class, "remindInfoNum", false, "REMIND_INFO_NUM");
        public final static Property RemindType = new Property(2, String.class, "remindType", false, "REMIND_TYPE");
        public final static Property RemindTitle = new Property(3, String.class, "remindTitle", false, "REMIND_TITLE");
        public final static Property RemindContent = new Property(4, String.class, "remindContent", false, "REMIND_CONTENT");
        public final static Property RemindUserNum = new Property(5, String.class, "remindUserNum", false, "REMIND_USER_NUM");
        public final static Property CreateTime = new Property(6, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CommonNum = new Property(7, String.class, "commonNum", false, "COMMON_NUM");
        public final static Property CommconContent = new Property(8, String.class, "commconContent", false, "COMMCON_CONTENT");
        public final static Property IsPush = new Property(9, int.class, "isPush", false, "IS_PUSH");
        public final static Property PushTime = new Property(10, String.class, "pushTime", false, "PUSH_TIME");
        public final static Property IsRead = new Property(11, int.class, "isRead", false, "IS_READ");
    }


    public RemindInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RemindInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMIND_INFO\" (" + //
                "\"REMIND_INFO_ID\" INTEGER NOT NULL ," + // 0: remindInfoId
                "\"REMIND_INFO_NUM\" TEXT UNIQUE ," + // 1: remindInfoNum
                "\"REMIND_TYPE\" TEXT," + // 2: remindType
                "\"REMIND_TITLE\" TEXT," + // 3: remindTitle
                "\"REMIND_CONTENT\" TEXT," + // 4: remindContent
                "\"REMIND_USER_NUM\" TEXT," + // 5: remindUserNum
                "\"CREATE_TIME\" TEXT," + // 6: createTime
                "\"COMMON_NUM\" TEXT," + // 7: commonNum
                "\"COMMCON_CONTENT\" TEXT," + // 8: commconContent
                "\"IS_PUSH\" INTEGER NOT NULL ," + // 9: isPush
                "\"PUSH_TIME\" TEXT," + // 10: pushTime
                "\"IS_READ\" INTEGER NOT NULL );"); // 11: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMIND_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemindInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRemindInfoId());
 
        String remindInfoNum = entity.getRemindInfoNum();
        if (remindInfoNum != null) {
            stmt.bindString(2, remindInfoNum);
        }
 
        String remindType = entity.getRemindType();
        if (remindType != null) {
            stmt.bindString(3, remindType);
        }
 
        String remindTitle = entity.getRemindTitle();
        if (remindTitle != null) {
            stmt.bindString(4, remindTitle);
        }
 
        String remindContent = entity.getRemindContent();
        if (remindContent != null) {
            stmt.bindString(5, remindContent);
        }
 
        String remindUserNum = entity.getRemindUserNum();
        if (remindUserNum != null) {
            stmt.bindString(6, remindUserNum);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
 
        String commonNum = entity.getCommonNum();
        if (commonNum != null) {
            stmt.bindString(8, commonNum);
        }
 
        String commconContent = entity.getCommconContent();
        if (commconContent != null) {
            stmt.bindString(9, commconContent);
        }
        stmt.bindLong(10, entity.getIsPush());
 
        String pushTime = entity.getPushTime();
        if (pushTime != null) {
            stmt.bindString(11, pushTime);
        }
        stmt.bindLong(12, entity.getIsRead());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemindInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRemindInfoId());
 
        String remindInfoNum = entity.getRemindInfoNum();
        if (remindInfoNum != null) {
            stmt.bindString(2, remindInfoNum);
        }
 
        String remindType = entity.getRemindType();
        if (remindType != null) {
            stmt.bindString(3, remindType);
        }
 
        String remindTitle = entity.getRemindTitle();
        if (remindTitle != null) {
            stmt.bindString(4, remindTitle);
        }
 
        String remindContent = entity.getRemindContent();
        if (remindContent != null) {
            stmt.bindString(5, remindContent);
        }
 
        String remindUserNum = entity.getRemindUserNum();
        if (remindUserNum != null) {
            stmt.bindString(6, remindUserNum);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
 
        String commonNum = entity.getCommonNum();
        if (commonNum != null) {
            stmt.bindString(8, commonNum);
        }
 
        String commconContent = entity.getCommconContent();
        if (commconContent != null) {
            stmt.bindString(9, commconContent);
        }
        stmt.bindLong(10, entity.getIsPush());
 
        String pushTime = entity.getPushTime();
        if (pushTime != null) {
            stmt.bindString(11, pushTime);
        }
        stmt.bindLong(12, entity.getIsRead());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RemindInfo readEntity(Cursor cursor, int offset) {
        RemindInfo entity = new RemindInfo( //
            cursor.getInt(offset + 0), // remindInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // remindInfoNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remindType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remindTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remindContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remindUserNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // commonNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // commconContent
            cursor.getInt(offset + 9), // isPush
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pushTime
            cursor.getInt(offset + 11) // isRead
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemindInfo entity, int offset) {
        entity.setRemindInfoId(cursor.getInt(offset + 0));
        entity.setRemindInfoNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRemindType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemindTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemindContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemindUserNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCommonNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCommconContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsPush(cursor.getInt(offset + 9));
        entity.setPushTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsRead(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RemindInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RemindInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(RemindInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
